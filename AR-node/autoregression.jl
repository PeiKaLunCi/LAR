import ForneyLab: SoftFactor, @ensureVariables, generateId, addNode!, associate!, averageEnergy
import SpecialFunctions: polygamma, digamma
export Autoregression, AR, averageEnergy

"""
Description:

    A Gaussian mixture with mean-precision parameterization:

    f(y, Œ∏, x, Œ≥) = ùí©(out|A(Œ∏)x, V(Œ≥)),

    where A(Œ∏) =  Œ∏·µÄ
                I	0

Interfaces:

    1. y (output vector)
    2. Œ∏ (autoregression coefficients)
    3. x (input vector)
    4. Œ≥ (precision)

Construction:

    Autoregression(out, Œ∏, in, Œ≥, id=:some_id)
"""
mutable struct Autoregression <: SoftFactor
    id::Symbol
    interfaces::Vector{Interface}
    i::Dict{Symbol,Interface}

    function Autoregression(y, Œ∏, x, Œ≥; id=generateId(Autoregression))
        @ensureVariables(y, x, Œ∏, Œ≥)
        self = new(id, Array{Interface}(undef, 4), Dict{Symbol,Interface}())
        addNode!(currentGraph(), self)
        self.i[:y] = self.interfaces[1] = associate!(Interface(self), y)
        self.i[:x] = self.interfaces[2] = associate!(Interface(self), x)
        self.i[:Œ∏] = self.interfaces[3] = associate!(Interface(self), Œ∏)
        self.i[:Œ≥] = self.interfaces[4] = associate!(Interface(self), Œ≥)
        return self
    end
end

function AR(Œ∏::Variable, x::Variable, Œ≥::Variable)
    y = Variable()
    Autoregression(y, Œ∏, x, Œ≥)
    return y
end

ForneyLab.slug(::Type{Autoregression}) = "AR"

# Average energy functional
function averageEnergy(::Type{Autoregression},
                       marg_y::ProbabilityDistribution{Multivariate},
                       marg_Œ∏::ProbabilityDistribution{Multivariate},
                       marg_x::ProbabilityDistribution{Multivariate},
                       marg_Œ≥::ProbabilityDistribution{Univariate})
    order = length(mean(marg_y))
    mŒ∏ = unsafeMean(marg_Œ∏)
    covŒ∏ = unsafeCov(marg_Œ∏)
    mA = S+c*mŒ∏'
    my = unsafeMean(marg_y)
    mx = unsafeMean(marg_x)
    mŒ≥ = unsafeMean(marg_Œ≥)
    mW = wMatrix(mŒ≥, order)
    Vx = unsafeCov(marg_x)
    B1 = tr(mW*unsafeCov(marg_y)) + my'*mW*my - (mA*mx)'*mW*my - my'*mW*mA*mx + tr(S'*mW*S*Vx)
    B2 = mŒ≥*mŒ∏'*Vx*mŒ∏ + tr(S'*mW*S*mx*mx') + mŒ≥*mx'*covŒ∏*mx + mŒ≥*mŒ∏'*mx*mx'*mŒ∏
    -0.5*(digamma(marg_Œ≥.params[:a]) - log(marg_Œ≥.params[:b]) - 0.5*(1-order)*log(tiny) + 0.5*order*log(2*pi)) + 0.5*(B1 + B2)
end
